name: Simple Workflow

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  
  # Prod
  AWS_PROD_ACCOUNT_ID: "682624655763"
  AWS_PROD_ROLE_FOR_GITHUB: scaleops-prod-github-oidc-infra-role
  
  # Dev
  AWS_DEV_ACCOUNT_ID: "111"
  AWS_DEV_ROLE_FOR_GITHUB: scaleops-dev-github-oidc-infra-role
  
  # DevOps
  AWS_DEVOPS_ACCOUNT_ID: "111"
  AWS_DEVOPS_ROLE_FOR_GITHUB: scaleops-dev-github-oidc-infra-role

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Step 1 - Build
        run: |
          
          trap '
            echo $ERROR_LOG
            echo "‚ùå ECS update-service failed for $SERVICE_NAME"
            bash ./$SLACK_JOB_NOTIFICATION_SCRIPT_PATH "${{ github.job }}" "failure" "ECS update-service failed for $SERVICE_NAME"
          ' ERR

          ERROR_LOG=$(ls 324325 2>&1 >/dev/null)
          
          trap - ERR
  # start-terraform-registry:
  #   name: "Start Terraform Registry ECS Service"
  #   runs-on: ubuntu-24.04
  #   env:
  #     ENV_BRANCH: main
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         ref: ${{ env.ENV_BRANCH }}
      
  #     - name: Configure AWS credentials via OIDC
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         # NOTE: Use the production IAM role because the Terraform registry is hosted in the prod AWS account only
  #         role-to-assume: arn:aws:iam::${{ env.AWS_PROD_ACCOUNT_ID }}:role/${{ env.AWS_PROD_ROLE_FOR_GITHUB }}
  #         aws-region: ${{ env.AWS_REGION }}
      
  #     - name: Increase ASG Capacity for Terraform Registry
  #       env:
  #         ASG_NAME: ECS-Cluster-Terraform-Registry-ECSAutoScalingGroup-WlwGYKaIjcbA
  #       run: |
  #         set -euo pipefail

  #         echo "üîπ Increasing ASG Capacity for Terraform Registry..."
  #         trap '
  #           echo "‚ùå ASG update-auto-scaling-group failed for $ASG_NAME"
  #           # bash ./$SLACK_JOB_NOTIFICATION_SCRIPT_PATH "${{ github.job }}" "failure" "ASG update-auto-scaling-group failed for $ASG_NAME"
  #         ' ERR

  #         aws autoscaling update-auto-scaling-group \
  #           --auto-scaling-group-name $ASG_NAME \
  #           --min-size 1 --max-size 1 --desired-capacity 1
          
  #         trap - ERR

  #         echo "‚úÖ ASG '$ASG_NAME' updated successfully: min=1, max=1, desired=1"
      
  #     - name: Start ECS Service for Terraform Registry
  #       env:
  #         CLUSTER_NAME: terraform-registry
  #         SERVICE_NAME: terraform-registry-ec2
  #         WAIT_TIMEOUT: 180
  #       run: |
  #         set -euo pipefail

  #         echo "üîπ Starting ECS Service for Terraform Registry..."
  #         trap '
  #           echo "‚ùå ECS update-service failed for $SERVICE_NAME"
  #           bash ./$SLACK_JOB_NOTIFICATION_SCRIPT_PATH "${{ github.job }}" "failure" "ECS update-service failed for $SERVICE_NAME"
  #         ' ERR

  #         aws ecs update-service \
  #           --cluster $CLUSTER_NAME \
  #           --service $SERVICE_NAME \
  #           --desired-count 1
          
  #         trap - ERR

  #         echo " üïí Waiting for ECS Service to be ready..."
  #         if ! timeout $WAIT_TIMEOUT aws ecs wait services-stable --cluster $CLUSTER_NAME --services $SERVICE_NAME; then
  #           echo "‚ùå Error: ECS service did not stabilize within ${WAIT_TIMEOUT}s."
  #           echo "üîç ECS Events:"
  #           aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME
  #           echo "üîç Running tasks:"
  #           aws ecs list-tasks --cluster "$CLUSTER_NAME" --service-name "$SERVICE_NAME" --desired-status RUNNING
            
  #           bash ./$SLACK_JOB_NOTIFICATION_SCRIPT_PATH "${{ github.job }}" "failure" "ECS service did not stabilize within ${WAIT_TIMEOUT}s"
  #           exit 1
  #         fi

  #     - name: Slack Notification - Terraform Registry Service Up
  #       if: ${{ success() }}
  #       run: |
  #         echo "‚úÖ Terraform Registry ECS service is up and stable."
  #         bash ./$SLACK_JOB_NOTIFICATION_SCRIPT_PATH "${{ github.job }}" "success" "Terraform Registry ECS service is up and stable"